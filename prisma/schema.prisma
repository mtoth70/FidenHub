generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  email         String   @unique
  passwordHash  String   // si usas credenciales

  firstName     String
  lastName      String
  rut           String   @unique
  region        String
  comuna        String

  role          String   @default("buyer")

  accounts      Account[]
  sessions      Session[]

  // Si tienes relaci√≥n Expert:
  expert        Expert?
  bookings      Booking[] @relation("BuyerBookings")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

// Tu modelo Expert y Booking siguen igual
model Expert {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique

  headline     String?
  bio          String?
  categoriesCsv String  @default("")
  languagesCsv  String  @default("")
  pricePerHour Int?
  status       String   @default("pending")

  bookings     Booking[]
}

model Booking {
  id           String    @id @default(cuid())

  buyer        User      @relation("BuyerBookings", fields: [buyerId], references: [id])
  buyerId      String

  expert       Expert    @relation(fields: [expertId], references: [id])
  expertId     String

  start        DateTime
  end          DateTime
  durationMin  Int
  priceTotal   Int
  status       String    @default("pending")
  videoLink    String?
  createdAt    DateTime  @default(now())
}

